{"version":3,"sources":["reducers.js","containers/actions.js","constants.js","api/api.js","components/CounterButton.js","components/Header.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Card.js","components/CardList.js","components/MainPage.js","containers/App.js","serviceWorker.js","index.js"],"names":["initialSearchState","searchField","initialRobotsState","isPending","robots","error","requestRobots","dispatch","type","url","fetch","then","response","json","data","payload","catch","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","className","style","color","props","onClick","data-test","Component","Header","SearchBox","searchChange","aria-label","placeholder","onChange","Scroll","overflowY","border","height","children","ErrorBoundary","hasError","info","Card","id","name","email","src","alt","CardList","map","robot","i","key","MainPage","filterRobots","filter","toLowerCase","includes","onRobotsRequest","onSearchChange","App","connect","searchRobots","value","target","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b2498647.chunk.js","sourcesContent":["import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialSearchState = {\n\tsearchField: ''\n};\n\nconst initialRobotsState = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n};\n\nconst searchRobots = (state=initialSearchState, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\t// Update state using Object.assign()\n\t\t\t// return Object.assign({}, state, { searchField: action.payload });\n\n\t\t\t// Update state using the spread operator\n\t\t\treturn { ...state, searchField: action.payload };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nconst requestRobots = (state=initialRobotsState, action={}) => {\n\tswitch (action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn { ...state, isPending: true };\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn { ...state, robots: action.payload, isPending: false };\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn { ...state, error: action.payload, isPending: false };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport { searchRobots, requestRobots };","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from '../constants';\nimport { apiCall } from \"../api/api\";\n\nconst setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n});\n\nconst requestRobots = () => dispatch => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\treturn apiCall('https://jsonplaceholder.typicode.com/users')\n\t\t.then(data => dispatch({\n\t\t\ttype: REQUEST_ROBOTS_SUCCESS,\n\t\t\tpayload: data\n\t\t}))\n\t\t.catch(error => dispatch({\n\t\t\ttype: REQUEST_ROBOTS_FAILED,\n\t\t\tpayload: error\n\t\t}));\n};\n\nexport { setSearchField, requestRobots };","// Search field change\nconst CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n// Robots request\nconst REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nconst REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nconst REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\nexport {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n};","export const apiCall = url => (\n\tfetch(url)\n\t\t.then(response => response.json())\n);","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcount: 0\n\t\t};\n\t}\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\treturn this.state.count !== nextState.count;\n\t}\n\n\tupdateCount = () => {\n\t\tthis.setState(state => {\n\t\t\treturn {count: state.count + 1};\n\t\t});\n\t};\n\n\trender () {\n\t\treturn (\n\t\t\t<button\n\t\t\t\tclassName=\"fw6 pa3 ba br-pill b--green bg-light-green\"\n\t\t\t\tstyle={{color: this.props.color}}\n\t\t\t\tonClick={this.updateCount}\n\t\t\t\tdata-test=\"counter\"\n\t\t\t>\n\t\t\t\tCount: {this.state.count}\n\t\t\t</button>\n\t\t);\n\t}\n}\n\nexport default CounterButton;","import React, {Component, Fragment} from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n\tshouldComponentUpdate() {\n\t\treturn false;\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t<CounterButton color={'#000000'} />\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n\nexport default Header;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n\t      aria-label=\"Search Robots\"\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robot'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '2px solid #0ccac4', height: '800px' }}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    return this.state.hasError ?\n      <h1>Oooops! That is not good!</h1> :\n      this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","import React from 'react';\n\n// Import props with destructuring\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className='bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}?size=200x200`} alt='robot' />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((robot, i) => {\n          return (\n            <Card\n              key={i}\n              id={robot.id}\n              name={robot.name}\n              email={robot.email}\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React, { Component } from 'react';\nimport Header from './Header';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nimport ErrorBoundary from './ErrorBoundary';\nimport CardList from './CardList';\nimport '../styles/MainPage.css';\n\nclass MainPage extends Component {\n  componentDidMount() {\n    this.props.onRobotsRequest();\n  }\n\n  filterRobots = () => {\n    const {searchField, robots} = this.props;\n\n    return robots.filter(robot => (\n      robot.name.toLowerCase().includes(searchField.toLowerCase()))\n    );\n  };\n\n  render() {\n    const { onSearchChange, isPending } = this.props;\n\n    return isPending ?\n      <h1 className='f2 tc'>Loading...</h1> :\n      (\n        <div className='tc'>\n          <Header />\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={this.filterRobots()} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default MainPage;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from './actions';\nimport MainPage from '../components/MainPage';\n\nconst mapStateToProps = state => {\n  return {\n  \tsearchField: state.searchRobots.searchField,\n    isPending: state.requestRobots.isPending,\n    robots: state.requestRobots.robots,\n    error: state.requestRobots.error\n  }\n};\n\n// Triggers the action\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: ({ target: {value} }) => dispatch(setSearchField(value)),\n    onRobotsRequest: () => dispatch(requestRobots())\n  }\n};\n\nclass App extends Component {\n  render() {\n    return <MainPage { ...this.props } />\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport './styles/index.css';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}