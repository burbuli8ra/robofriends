{"version":3,"sources":["reducers.js","containers/actions.js","api/api.js","constants.js","components/CounterButton.js","components/Header.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Card.js","components/CardList.js","containers/App.js","serviceWorker.js","index.js"],"names":["initialSearchState","searchField","initialRobotsState","isPending","robots","error","requestRobots","dispatch","url","type","fetch","then","response","json","data","payload","catch","CounterButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCount","setState","state","count","nextProps","nextState","react_default","a","createElement","className","style","color","props","onClick","Component","Header","react","components_CounterButton","SearchBox","_ref","searchChange","aria-label","placeholder","onChange","Scroll","overflowY","border","height","children","ErrorBoundary","hasError","info","Card","id","name","email","src","concat","alt","CardList","map","robot","i","components_Card","key","App","onRobotsRequest","_this$props","onSearchChange","filterRobots","filter","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","value","target","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.42504a22.chunk.js","sourcesContent":["import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialSearchState = {\n\tsearchField: ''\n};\n\nconst initialRobotsState = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n};\n\nconst searchRobots = (state=initialSearchState, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\t// Update state using Object.assign()\n\t\t\t// return Object.assign({}, state, { searchField: action.payload });\n\n\t\t\t// Update state using the spread operator\n\t\t\treturn { ...state, searchField: action.payload };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nconst requestRobots = (state=initialRobotsState, action={}) => {\n\tswitch (action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn { ...state, isPending: true };\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn { ...state, robots: action.payload, isPending: false };\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn { ...state, error: action.payload, isPending: false };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport { searchRobots, requestRobots };","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from '../constants';\nimport { apiCall } from \"../api/api\";\n\nconst setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n});\n\nconst requestRobots = () => dispatch => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\tapiCall('https://jsonplaceholder.typicode.com/users')\n\t\t.then(data => dispatch({\n\t\t\ttype: REQUEST_ROBOTS_SUCCESS,\n\t\t\tpayload: data\n\t\t}))\n\t\t.catch(error => dispatch({\n\t\t\ttype: REQUEST_ROBOTS_FAILED,\n\t\t\tpayload: error\n\t\t}));\n};\n\nexport { setSearchField, requestRobots };","export const apiCall = url => (\n\tfetch(url)\n\t\t.then(response => response.json())\n);","// Search field change\nconst CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n// Robots request\nconst REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nconst REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nconst REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\nexport {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n};","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcount: 0\n\t\t};\n\t}\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\treturn this.state.count !== nextState.count;\n\t}\n\n\tupdateCount = () => {\n\t\tthis.setState(state => {\n\t\t\treturn {count: state.count + 1};\n\t\t});\n\t};\n\n\trender () {\n\t\treturn (\n\t\t\t<button\n\t\t\t\tclassName=\"fw6 pa3 ba br-pill b--green bg-light-green\"\n\t\t\t\tstyle={{color: this.props.color}}\n\t\t\t\tonClick={this.updateCount}\n\t\t\t>\n\t\t\t\tCount: {this.state.count}\n\t\t\t</button>\n\t\t);\n\t}\n}\n\nexport default CounterButton;","import React, {Component, Fragment} from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n\tshouldComponentUpdate() {\n\t\treturn false;\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t<CounterButton color={'#0ccac4'} />\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n\nexport default Header;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n\t      aria-label=\"Search Robots\"\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robot'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '2px solid #0ccac4', height: '800px' }}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    return this.state.hasError ?\n      <h1>Oooops! That is not good!</h1> :\n      this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","import React from 'react';\n\n// Import props with destructuring\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className='bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}?size=200x200`} alt='robot' />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((robot, i) => {\n          return (\n            <Card\n              key={i}\n              id={robot.id}\n              name={robot.name}\n              email={robot.email}\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from './actions';\nimport Header from '../components/Header';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport CardList from '../components/CardList';\nimport '../styles/App.css';\n\nconst mapStateToProps = state => {\n  return {\n  \tsearchField: state.searchRobots.searchField,\n    isPending: state.requestRobots.isPending,\n    robots: state.requestRobots.robots,\n    error: state.requestRobots.error\n  }\n};\n\n// Triggers the action\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: ({ target: {value} }) => dispatch(setSearchField(value)),\n    onRobotsRequest: () => dispatch(requestRobots())\n  }\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRobotsRequest();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filterRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    });\n\n    return isPending ?\n      <h1 className='f2 tc'>Loading...</h1> :\n      (\n        <div className='tc'>\n          <Header />\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filterRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport './styles/index.css';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}